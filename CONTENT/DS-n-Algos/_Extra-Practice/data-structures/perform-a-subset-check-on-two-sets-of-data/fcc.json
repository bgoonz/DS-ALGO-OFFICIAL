{
  "title": "Perform a Subset Check on Two Sets of Data",
  "htmlDescription": "<section id=\"description\">\n<p>In this exercise, we are going to perform a subset test on 2 sets of data. We will create a method on our <code>Set</code> data structure called <code>isSubsetOf</code>. This will compare the first set against the second, and if the first set is fully contained within the second, it will return <code>true</code>.</p>\n<p>For example, if <code>setA = ['a','b']</code> and <code>setB = ['a','b','c','d']</code>, then <code>setA</code> is a subset of <code>setB</code>, so <code>setA.isSubsetOf(setB)</code> should return <code>true</code>.</p>\n</section>",
  "boilerplate": "class Set {\n  constructor() {\n    // This will hold the set\n    this.dictionary = {};\n    this.length = 0;\n  }\n  // This method will check for the presence of an element and return true or false\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n  // This method will return all the values in the set\n  values() {\n    return Object.keys(this.dictionary);\n  }\n  // This method will add an element to the set\n  add(element) {\n    if (!this.has(element)) {\n      this.dictionary[element] = true;\n      this.length++;\n      return true;\n    }\n\n    return false;\n  }\n  // This method will remove an element from a set\n  remove(element) {\n    if (this.has(element)) {\n      delete this.dictionary[element];\n      this.length--;\n      return true;\n    }\n\n    return false;\n  }\n  // This method will return the size of the set\n  size() {\n    return this.length;\n  }\n  // This is our union method \n  union(set) {\n    const newSet = new Set();\n    this.values().forEach(value => {\n      newSet.add(value);\n    })\n    set.values().forEach(value => {\n      newSet.add(value);\n    })\n\n    return newSet;\n  }\n  // This is our intersection method\n  intersection(set) {\n    const newSet = new Set();\n\n    let largeSet;\n    let smallSet;\n    if (this.dictionary.length > set.length) {\n      largeSet = this;\n      smallSet = set;\n    } else {\n      largeSet = set;\n      smallSet = this;\n    }\n\n    smallSet.values().forEach(value => {\n      if (largeSet.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }\n\n  difference(set) {\n    const newSet = new Set();\n\n    this.values().forEach(value => {\n      if (!set.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }\n  // Only change code below this line\n  \n  // Only change code above this line\n}",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/data-structures/perform-a-subset-check-on-two-sets-of-data"
}