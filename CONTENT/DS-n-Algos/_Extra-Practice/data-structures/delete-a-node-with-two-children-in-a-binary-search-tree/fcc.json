{
  "title": "Delete a Node with Two Children in a Binary Search Tree",
  "htmlDescription": "<section id=\"description\">\n<p>Removing nodes that have two children is the hardest case to implement. Removing a node like this produces two subtrees that are no longer connected to the original tree structure. How can we reconnect them? One method is to find the smallest value in the right subtree of the target node and replace the target node with this value. Selecting the replacement in this way ensures that it is greater than every node in the left subtree it becomes the new parent of but also less than every node in the right subtree it becomes the new parent of. Once this replacement is made the replacement node must be removed from the right subtree. Even this operation is tricky because the replacement may be a leaf or it may itself be the parent of a right subtree. If it is a leaf we must remove its parent's reference to it. Otherwise, it must be the right child of the target. In this case, we must replace the target value with the replacement value and make the target reference the replacement's right child.</p>\n</section>",
  "boilerplate": "var displayTree = tree => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n  this.value = value;\n  this.left = null;\n  this.right = null;\n}\n\nfunction BinarySearchTree() {\n  this.root = null;\n  this.remove = function(value) {\n    if (this.root === null) {\n      return null;\n    }\n    var target;\n    var parent = null;\n    // Find the target value and its parent\n    (function findValue(node = this.root) {\n      if (value == node.value) {\n        target = node;\n      } else if (value < node.value && node.left !== null) {\n        parent = node;\n        return findValue(node.left);\n      } else if (value < node.value && node.left === null) {\n        return null;\n      } else if (value > node.value && node.right !== null) {\n        parent = node;\n        return findValue(node.right);\n      } else {\n        return null;\n      }\n    }.bind(this)());\n    if (target === null) {\n      return null;\n    }\n    // Count the children of the target to delete\n    var children =\n      (target.left !== null ? 1 : 0) + (target.right !== null ? 1 : 0);\n    // Case 1: Target has no children\n    if (children === 0) {\n      if (target == this.root) {\n        this.root = null;\n      } else {\n        if (parent.left == target) {\n          parent.left = null;\n        } else {\n          parent.right = null;\n        }\n      }\n    }\n    // Case 2: Target has one child\n    else if (children == 1) {\n      var newChild = target.left !== null ? target.left : target.right;\n      if (parent === null) {\n        target.value = newChild.value;\n        target.left = null;\n        target.right = null;\n      } else if (newChild.value < parent.value) {\n        parent.left = newChild;\n      } else {\n        parent.right = newChild;\n      }\n      target = null;\n    }\n    // Case 3: Target has two children\n    // Only change code below this line\n  };\n}",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/data-structures/delete-a-node-with-two-children-in-a-binary-search-tree"
}