{
  "title": "Adjacency List",
  "htmlDescription": "<section id=\"description\">\n<p>Graphs can be represented in different ways. Here we describe one way, which is called an <dfn>adjacency list</dfn>. An adjacency list is essentially a bulleted list where the left side is the node and the right side lists all the other nodes it's connected to. Below is a representation of an adjacency list.</p>\n<blockquote>Node1: Node2, Node3<br>Node2: Node1<br>Node3: Node1</blockquote>\n<p>Above is an undirected graph because <code>Node1</code> is connected to <code>Node2</code> and <code>Node3</code>, and that information is consistent with the connections <code>Node2</code> and <code>Node3</code> show. An adjacency list for a directed graph would mean each row of the list shows direction. If the above was directed, then <code>Node2: Node1</code> would mean there the directed edge is pointing from <code>Node2</code> towards <code>Node1</code>. We can represent the undirected graph above as an adjacency list by putting it within a JavaScript object.</p>\n<pre><code class=\"language-js\">var undirectedG = {\n  Node1: [\"Node2\", \"Node3\"],\n  Node2: [\"Node1\"],\n  Node3: [\"Node1\"]\n};\n</code></pre>\n<p>This can also be more simply represented as an array where the nodes just have numbers rather than string labels.</p>\n<pre><code class=\"language-js\">var undirectedGArr = [\n  [1, 2], // Node1\n  [0],    // Node2\n  [0]     // Node3\n];\n</code></pre>\n</section>",
  "boilerplate": "var undirectedAdjList = {};",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/data-structures/adjacency-list"
}