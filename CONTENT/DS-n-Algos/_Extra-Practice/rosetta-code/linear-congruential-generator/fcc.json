{
  "title": "Linear congruential generator",
  "htmlDescription": "<section id=\"description\">\n<p>The <a href=\"https://en.wikipedia.org/wiki/linear%20congruential%20generator\">linear congruential generator</a> is a very simple example of a <a href=\"http://rosettacode.org/wiki/random%20number%20generator\">random number generator</a>. All linear congruential generators use this formula:</p>\n<p>$$r_{n + 1} = (a \\times r_n + c) \\bmod m$$</p>\n<p>Where:</p>\n<ul>\n<li>$ r_0 $ is a seed.</li>\n<li>$r_1$, $r_2$, $r_3$, ..., are the random numbers.</li>\n<li>$a$, $c$, $m$ are constants.</li>\n</ul>\n<p>If one chooses the values of $a$, $c$ and $m$ with care, then the generator produces a uniform distribution of integers from $0$ to $m - 1$.</p>\n<p>LCG numbers have poor quality. $r_n$ and $r_{n + 1}$ are not independent, as true random numbers would be. Anyone who knows $r_n$ can predict $r_{n + 1}$, therefore LCG is not cryptographically secure. The LCG is still good enough for simple tasks like <a href=\"http://rosettacode.org/wiki/Miller-Rabin%20primality%20test\">Miller-Rabin primality test</a>, or <a href=\"http://rosettacode.org/wiki/deal%20cards%20for%20FreeCell\">FreeCell deals</a>. Among the benefits of the LCG, one can easily reproduce a sequence of numbers, from the same $r_0$. One can also reproduce such sequence with a different programming language, because the formula is so simple.</p>\n</section>",
  "boilerplate": "function linearCongGenerator(r0, a, c, m, n) {\n\n}",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/rosetta-code/linear-congruential-generator"
}