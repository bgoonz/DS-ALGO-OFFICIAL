{
  "title": "Closest-pair problem",
  "htmlDescription": "<section id=\"description\">\n<p>Provide a function to find the closest two points among a set of given points in two dimensions, i.e. to solve the <a href=\"https://en.wikipedia.org/wiki/Closest%20pair%20of%20points%20problem\" title=\"wp: Closest pair of points problem\">Closest pair of points problem</a> in the <em>planar</em> case.</p>\n<p>The straightforward solution is a O(n<sup>2</sup>) algorithm (which we can call <em>brute-force algorithm</em>); the pseudo-code (using indexes) could be simply:</p>\n<pre><strong>bruteForceClosestPair</strong> of P(1), P(2), ... P(N)\n<strong>if</strong> N &#x3C; 2 <strong>then</strong>\n  <strong>return</strong> ∞\n<strong>else</strong>\n  minDistance ← |P(1) - P(2)|\n  minPoints ← { P(1), P(2) }\n  <strong>foreach</strong> i ∈ [1, N-1]\n    <strong>foreach</strong> j ∈ [i+1, N]\n      <strong>if</strong> |P(i) - P(j)| &#x3C; minDistance <strong>then</strong>\n        minDistance ← |P(i) - P(j)|\n        minPoints ← { P(i), P(j) }\n      <strong>endif</strong>\n    <strong>endfor</strong>\n  <strong>endfor</strong>\n  <strong>return</strong> minDistance, minPoints\n<strong>endif</strong>\n</pre>\n<p>A better algorithm is based on the recursive divide and conquer approach, as explained also at <a href=\"https://en.wikipedia.org/wiki/Closest%20pair%20of%20points%20problem#Planar_case\" title=\"wp: Closest pair of points problem#Planar_case\">Wikipedia's Closest pair of points problem</a>, which is <code>O(nlog(n))</code> a pseudo-code could be:</p>\n<pre><strong>closestPair</strong> of (xP, yP)\n  where xP is P(1) .. P(N) sorted by x coordinate, and\n  yP is P(1) .. P(N) sorted by y coordinate (ascending order)\n<strong>if</strong> N ≤ 3 <strong>then</strong>\n  <strong>return</strong> closest points of xP using brute-force algorithm\n<strong>else</strong>\n  xL ← points of xP from 1 to ⌈N/2⌉\n  xR ← points of xP from ⌈N/2⌉+1 to N\n  xm ← xP(⌈N/2⌉)<sub>x</sub>\n  yL ← { p ∈ yP : p<sub>x</sub> ≤ xm }\n  yR ← { p ∈ yP : p<sub>x</sub> > xm }\n  (dL, pairL) ← closestPair of (xL, yL)\n  (dR, pairR) ← closestPair of (xR, yR)\n  (dmin, pairMin) ← (dR, pairR)\n  <strong>if</strong> dL &#x3C; dR <strong>then</strong>\n    (dmin, pairMin) ← (dL, pairL)\n  <strong>endif</strong>\n  yS ← { p ∈ yP : |xm - p<sub>x</sub>| &#x3C; dmin }\n  nS ← number of points in yS\n  (closest, closestPair) ← (dmin, pairMin)\n  <strong>for</strong> i <strong>from</strong> 1 <strong>to</strong> nS - 1\n    k ← i + 1\n    <strong>while</strong> k ≤ nS <strong>and</strong> yS(k)<sub>y</sub> - yS(i)<sub>y</sub> &#x3C; dmin\n      <strong>if</strong> |yS(k) - yS(i)| &#x3C; closest <strong>then</strong>\n        (closest, closestPair) ← (|yS(k) - yS(i)|, {yS(k), yS(i)})\n      <strong>endif</strong>\n      k ← k + 1\n    <strong>endwhile</strong>\n  <strong>endfor</strong>\n  <strong>return</strong> closest, closestPair\n<strong>endif</strong>\n</pre>\n<p>For the input, expect the argument to be an array of objects (points) with <code>x</code> and <code>y</code> members set to numbers. For the output, return an object containing the key:value pairs for <code>distance</code> and <code>pair</code> (the pair of two closest points).</p>\n<p><strong>References and further readings:</strong></p>\n<ul>\n  <li><a href='https://en.wikipedia.org/wiki/Closest pair of points problem' title='wp: Closest pair of points problem' target='_blank'>Closest pair of points problem</a></li>\n  <li><a href='https://www.cs.mcgill.ca/~cs251/ClosestPair/ClosestPairDQ.html' target='_blank'>Closest Pair (McGill)</a></li>\n  <li><a href='https://www.cs.ucsb.edu/~suri/cs235/ClosestPair.pdf' target='_blank'>Closest Pair (UCSB)</a></li>\n  <li><a href='https://classes.cec.wustl.edu/~cse241/handouts/closestpair.pdf' target='_blank'>Closest pair (WUStL)</a></li>\n </ul>\n</section>",
  "boilerplate": "const Point = function(x, y) {\n  this.x = x;\n  this.y = y;\n};\nPoint.prototype.getX = function() {\n  return this.x;\n};\nPoint.prototype.getY = function() {\n  return this.y;\n};\n\nfunction getClosestPair(pointsArr) {\n\n  return true;\n}",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/rosetta-code/closest-pair-problem"
}