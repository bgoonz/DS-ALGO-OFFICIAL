{
  "title": "Subleq",
  "htmlDescription": "<section id=\"description\">\n<p><a href=\"https://rosettacode.org/wiki/eso:Subleq\">Subleq</a> is an example of a <a href=\"https://en.wikipedia.org/wiki/One_instruction_set_computer\">One-Instruction Set Computer (OISC)</a>.</p>\n<p>It is named after its only instruction, which is <strong>SU</strong>btract and <strong>B</strong>ranch if <strong>L</strong>ess than or <strong>EQ</strong>ual</p>\n<p>to zero.</p>\n<p>Your task is to create an interpreter which emulates such a machine.</p>\n<p>The machine's memory consists of an array of signed integers. Any reasonable word size is fine, but the memory must be</p>\n<p>able to hold negative as well as positive numbers.</p>\n<p>Execution begins with the instruction pointer aimed at the first word, which is address 0. It proceeds as follows:</p>\n<ol>\n  <li>Let A, B, and C be the value stored in the three consecutive words in memory starting at the instruction pointer.</li>\n  <li>Advance the instruction pointer 3 words to point at the address after the one containing C.</li>\n  <li>If A is -1, then a character is read from standard input and its code point stored in the address given by B. C\n    is unused.</li>\n  <li>If B is -1, then the number contained in the address given by A is interpreted as a code point and the\n    corresponding character output. C is again unused.</li>\n  <li>Otherwise, both A and B are treated as the addresses of memory locations. The number contained in the address\n    given by A is subtracted from the number at the address given by B (and the result stored back in address B). If\n    the result is zero or negative, the value C becomes the new instruction pointer.</li>\n  <li>If the instruction pointer becomes negative, execution halts.</li>\n</ol>\n<p>Other negative addresses besides -1 may be treated as equivalent to -1, or generate an error, as you see fit.</p>\n<p>Your solution should accept a program to execute on the machine, separately from the input fed to the program itself.</p>\n<p>This program should be in raw subleq \"machine code\" - whitespace-separated decimal numbers, with no symbolic names or</p>\n<p>other assembly-level extensions, to be loaded into memory starting at address 0. Show the output of your solution when</p>\n<p>fed this \"Hello, world!\" program. (Note that the example assumes ASCII or a superset of it, such as any of the Latin-N</p>\n<p>character sets or Unicode. You may translate it into another character set if your implementation is on a</p>\n<p>non-ASCiI-compatible environment.)</p>\n<pre>15 17 -1 17 -1 -1 16 1 -1 16 3 -1 15 15 0 0 -1 72 101 108 108 111 44 32 119 111 114 108 100 33 10 0</pre>\n<p>Which corresponds to something like this in a hypothetical assembler language:</p>\n<pre>start:\n    zero, message, -1\n    message, -1, -1\n    neg1, start+1, -1\n    neg1, start+3, -1\n    zero, zero, start\nzero: 0\nneg1: -1\nmessage: \"Hello, world!\\n\\0\"\n</pre>\n</section>",
  "boilerplate": "function Subleq(mem) {\n\n}",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/rosetta-code/subleq"
}