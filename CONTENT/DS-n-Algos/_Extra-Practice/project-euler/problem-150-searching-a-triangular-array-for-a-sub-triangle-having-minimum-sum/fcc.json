{
  "title": "Problem 150: Searching a triangular array for a sub-triangle having minimum-sum",
  "htmlDescription": "<section id=\"description\">\n<p>In a triangular array of positive and negative integers, we wish to find a sub-triangle such that the sum of the numbers it contains is the smallest possible.</p>\n<p>In the example below, it can be easily verified that the marked triangle satisfies this condition having a sum of −42.</p>\n<p>We wish to make such a triangular array with one thousand rows, so we generate 500500 pseudo-random numbers sk in the range ±219, using a type of random number generator (known as a Linear Congruential Generator) as follows: t := 0</p>\n<p>for k = 1 up to k = 500500:</p>\n<p>t := (615949*t + 797807) modulo 220 sk := t−219 Thus: s1 = 273519, s2 = −153582, s3 = 450905 etc Our triangular array is then formed using the pseudo-random numbers thus:</p>\n<p>s1 s2 s3 s4 s5 s6</p>\n<p>s7 s8 s9 s10 ...</p>\n<p>Sub-triangles can start at any element of the array and extend down as far as we like (taking-in the two elements directly below it from the next row, the three elements directly below from the row after that, and so on).</p>\n<p>The \"sum of a sub-triangle\" is defined as the sum of all the elements it contains.</p>\n<p>Find the smallest possible sub-triangle sum.</p>\n</section>",
  "boilerplate": "function euler150() {\n\n  return true;\n}\n\neuler150();",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-150-searching-a-triangular-array-for-a-sub-triangle-having-minimum-sum"
}