{
  "title": "Problem 55: Lychrel numbers",
  "htmlDescription": "<section id=\"description\">\n<p>If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.</p>\n<p>Not all numbers produce palindromes so quickly. For example,</p>\n<div style=\"margin-left: 4em;\">\n  349 + 943 = 1292,<br>\n  1292 + 2921 = 4213<br>\n  4213 + 3124 = 7337<br>\n</div>\n<p>That is, 349 took three iterations to arrive at a palindrome.</p>\n<p>Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).</p>\n<p>Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.</p>\n<p>How many Lychrel numbers are there below <code>num</code>?</p>\n<p><strong>Note:</strong> Wording was modified slightly on 24 April 2007 to emphasize the theoretical nature of Lychrel numbers.</p>\n</section>",
  "boilerplate": "function countLychrelNumbers(num) {\n\n  return true;\n}\n\ncountLychrelNumbers(10000);",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-55-lychrel-numbers"
}