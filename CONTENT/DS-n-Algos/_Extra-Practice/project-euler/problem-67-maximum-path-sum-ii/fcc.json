{
  "title": "Problem 67: Maximum path sum II",
  "htmlDescription": "<section id=\"description\">\n<p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p>\n<div style='text-align: center;'>\n  <strong style='color: red;'>3</strong><br>\n  <strong style='color: red;'>7</strong> 4<br>\n  2 <strong style='color: red;'>4</strong> 6<br>\n  8 5 <strong style='color: red;'>9</strong> 3\n</div>\n<p>That is, 3 + 7 + 4 + 9 = 23.</p>\n<p>Find the maximum total from top to bottom in <code>numTriangle</code>, a 2D array defined in the background containing a triangle with one-hundred rows.</p>\n<p><strong>Note:</strong> This is a much more difficult version of Problem 18. It is not possible to try every route to solve this problem, as there are 2<sup>99</sup> altogether! If you could check one trillion (10<sup>12</sup>) routes every second it would take over twenty billion years to check them all. There is an efficient algorithm to solve it. ;o)</p>\n</section>",
  "boilerplate": "function maximumPathSumII(triangle) {\n\n  return true;\n}\n\nconst testTriangle = [[3, 0, 0, 0],\n                      [7, 4, 0, 0],\n                      [2, 4, 6, 0],\n                      [8, 5, 9, 3]];\n\nmaximumPathSumII(testTriangle);",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-67-maximum-path-sum-ii"
}