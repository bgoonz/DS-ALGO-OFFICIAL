{
  "title": "Problem 149: Searching for a maximum-sum subsequence",
  "htmlDescription": "<section id=\"description\">\n<p>Looking at the table below, it is easy to verify that the maximum possible sum of adjacent numbers in any direction (horizontal, vertical, diagonal or anti-diagonal) is 16 (= 8 + 7 + 1).</p>\n<p>−25329−6513273−18−4 8</p>\n<p>Now, let us repeat the search, but on a much larger scale:</p>\n<p>First, generate four million pseudo-random numbers using a specific form of what is known as a \"Lagged Fibonacci Generator\":</p>\n<p>For 1 ≤ k ≤ 55, sk = [100003 − 200003k + 300007k3] (modulo 1000000) − 500000. For 56 ≤ k ≤ 4000000, sk = [sk−24 + sk−55 + 1000000] (modulo 1000000) − 500000.</p>\n<p>Thus, s10 = −393027 and s100 = 86613.</p>\n<p>The terms of s are then arranged in a 2000×2000 table, using the first 2000 numbers to fill the first row (sequentially), the next 2000 numbers to fill the second row, and so on.</p>\n<p>Finally, find the greatest sum of (any number of) adjacent entries in any direction (horizontal, vertical, diagonal or anti-diagonal).</p>\n</section>",
  "boilerplate": "function euler149() {\n\n  return true;\n}\n\neuler149();",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-149-searching-for-a-maximum-sum-subsequence"
}