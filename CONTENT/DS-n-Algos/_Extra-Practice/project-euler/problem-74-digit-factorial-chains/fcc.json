{
  "title": "Problem 74: Digit factorial chains",
  "htmlDescription": "<section id=\"description\">\n<p>The number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:</p>\n<div style='margin-left: 4em;'>1! + 4! + 5! = 1 + 24 + 120 = 145</div>\n<p>Perhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:</p>\n<div style='margin-left: 4em;'>\n  169 → 363601 → 1454 → 169<br>\n  871 → 45361 → 871<br>\n  872 → 45362 → 872<br>\n</div>\nIt is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,\n<div style='margin-left: 4em;'>\n  69 → 363600 → 1454 → 169 → 363601 (→ 1454)<br>\n  78 → 45360 → 871 → 45361 (→ 871)<br>\n  540 → 145 (→ 145)<br>\n</div>\n<p>Starting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.</p>\n<p>How many chains, with a starting number below one million, contain exactly sixty non-repeating terms?</p>\n</section>",
  "boilerplate": "function digitFactorialChains() {\n\n  return true;\n}\n\ndigitFactorialChains();",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-74-digit-factorial-chains"
}