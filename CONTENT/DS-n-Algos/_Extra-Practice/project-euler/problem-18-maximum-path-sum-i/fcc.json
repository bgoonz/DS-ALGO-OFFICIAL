{
  "title": "Problem 18: Maximum path sum I",
  "htmlDescription": "<section id=\"description\">\n<p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p>\n<span style='display: block; text-align: center;'>\n  <strong style='color: red;'>3</strong><br>\n  <strong style='color: red;'>7</strong> 4<br>\n  2 <strong style='color: red;'>4</strong> 6<br>\n  8 5 <strong style='color: red;'>9</strong> 3\n</span>\n<p>That is, 3 + 7 + 4 + 9 = 23.</p>\n<p>Find the maximum total from top to bottom of the triangle below:</p>\n<p>75<br>\n95 64<br>\n17 47 82<br>\n18 35 87 10<br>\n20 04 82 47 65<br>\n19 01 23 75 03 34<br>\n88 02 77 73 07 63 67<br>\n99 65 04 28 06 16 70 92<br>\n41 41 26 56 83 40 80 70 33<br>\n41 48 72 33 47 32 37 16 94 29<br>\n53 71 44 65 25 43 91 52 97 51 14<br>\n70 11 33 28 77 73 17 78 39 68 17 57<br>\n91 71 52 38 17 14 91 43 58 50 27 29 48<br>\n63 66 04 68 89 53 67 30 73 16 69 87 40 31<br>\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23</p>\n<p><strong>NOTE:</strong> As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)</p>\n</section>",
  "boilerplate": "function maximumPathSumI(triangle) {\n\n  return true;\n}\n\nconst testTriangle = [[3, 0, 0, 0],\n                      [7, 4, 0, 0],\n                      [2, 4, 6, 0],\n                      [8, 5, 9, 3]];\n\nmaximumPathSumI(testTriangle);",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-18-maximum-path-sum-i"
}