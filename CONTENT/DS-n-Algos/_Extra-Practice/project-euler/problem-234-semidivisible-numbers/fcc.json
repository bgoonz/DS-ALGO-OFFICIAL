{
  "title": "Problem 234: Semidivisible numbers",
  "htmlDescription": "<section id=\"description\">\n<p>For an integer n ≥ 4, we define the lower prime square root of n, denoted by lps(n), as the largest prime ≤ √n and the upper prime square root of n, ups(n), as the smallest prime ≥ √n.</p>\n<p>So, for example, lps(4) = 2 = ups(4), lps(1000) = 31, ups(1000) = 37.</p>\n<p>Let us call an integer n ≥ 4 semidivisible, if one of lps(n) and ups(n) divides n, but not both.</p>\n<p>The sum of the semidivisible numbers not exceeding 15 is 30, the numbers are 8, 10 and 12. 15 is not semidivisible because it is a multiple of both lps(15) = 3 and ups(15) = 5. As a further example, the sum of the 92 semidivisible numbers up to 1000 is 34825.</p>\n<p>What is the sum of all semidivisible numbers not exceeding 999966663333 ?</p>\n</section>",
  "boilerplate": "function euler234() {\n\n  return true;\n}\n\neuler234();",
  "url": "https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-234-semidivisible-numbers"
}